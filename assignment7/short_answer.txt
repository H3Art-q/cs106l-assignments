Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Unique Pointer
--------------

Q1. List one or two benefits of using RAII to manage memory instead manually calling `new` and `delete`.
A1. RAII (Resource Acquisition Is Initialization) ensures that resources (like memory allocated with new) are automatically released when they go out of scope, eliminating the risk of memory leaks that can occur if delete is forgotten or skipped (e.g., due to early return or exceptions). Additionally, RAII simplifies code by tying resource management to object lifetime, reducing the need for manual bookkeeping of new/delete pairs.

Q2. When implementing move semantics for a `unique_ptr`, for example in the move constructor `unique_ptr(unique_ptr&& other)`, it is essential that we set the underlying pointer of the `other` parameter to `nullptr` before exiting the function. Explain in your own words what problem would arise if we did not.
A2. If other's underlying pointer is not set to nullptr, both the new unique_ptr and other would point to the same resource. When other goes out of scope, its destructor would delete the resource, leaving the new unique_ptr with a dangling pointer. Later, when the new unique_ptr is destroyed, it would attempt to delete the already-freed resource, causing a double free error (undefined behavior, often crashing the program).

Q3. This method of recursive deallocation through RAII works great for small lists, but may pose a problem for longer lists. Why? Hint: what is the limit for how "deep" a recursive function's call stack can grow?
A3. Recursive deallocation (e.g., a ListNode destructor that deletes next, which in turn deletes its next, etc.) relies on the call stack to track each recursive step. For very long lists, the call stack can exceed its maximum size, causing a stack overflow. This is because the stack has a fixed limit (much smaller than the heap), and deep recursion consumes stack memory with each function call until it is exhausted.

Q4. What does `std::move` do in this context? Why is it safe to use `std::move` and move semantics here?
A4. In this context, std::move converts the head and current (left-value references) to r-value references, enabling the transfer of ownership of their underlying ListNode resources via move semantics. This is safe because unique_ptr enforces exclusive ownership: after std::move(head) transfers ownership to current->next, head is no longer responsible for the resource (it becomes a null pointer), avoiding double frees. Move semantics here efficiently transfers pointers without copying data, ensuring the list is constructed correctly with proper ownership of each node.